workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
    - if: $CI_PIPELINE_SOURCE == "web"

.dp:
  variables:
    RTE_ENABLE_SP: "OFF"

.sp:
  variables:
    RTE_ENABLE_SP: "ON"

.common:
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 8
    VERBOSE:
    CTEST_PARALLEL_LEVEL: 8
    CTEST_OUTPUT_ON_FAILURE: 1
  script:
    - >
      cmake -S . -B build
      -DCMAKE_BUILD_TYPE=None
      -DRTE_ENABLE_SP=${RTE_ENABLE_SP}
      -DKERNEL_MODE=${KERNEL_MODE}
      -DBUILD_TESTING=ON
    - cmake --build build
    - ctest --test-dir build

include:
  - project: 'anw_dienste/ci-templates'
    file: '.slurm-ci.yml'

.default-levante:
  extends: .default
  variables:
    TIME_LIMIT: "05:00"
    SCHEDULER_PARAMETERS: >-
      --account=mh0287
      --time=${TIME_LIMIT}
      ${EXTRA_SCHEDULER_PARAMETERS}
    EXTRA_SCHEDULER_PARAMETERS:

.gpu-levante:
  extends: .default-levante
  variables:
    EXTRA_SCHEDULER_PARAMETERS: >-
      --partition=gpu
      --gpus=1

.cpu-levante:
  extends: .default-levante
  variables:
    EXTRA_SCHEDULER_PARAMETERS: >-
      --partition=shared

.nvhpc-levante:
  variables:
    FC: /sw/spack-levante/nvhpc-24.9-p7iohv/Linux_x86_64/24.9/compilers/bin/nvfortran
    NetCDF_Fortran_ROOT: /sw/spack-levante/netcdf-fortran-4.6.1-4wu5wt

.nag-levante:
  variables:
    FC: /sw/spack-levante/nag-7.1-lqjbej/bin/nagfor
    NetCDF_Fortran_ROOT: /sw/spack-levante/netcdf-fortran-4.5.3-5di6qe

.common-levante:
  extends: .common
  variables:
    PYHOME: /sw/spack-levante/mambaforge-22.9.0-2-Linux-x86_64-kptncg
    # Suppress an irrelevant but annoying error message:
    PROJ_LIB: ${PYHOME}/share/proj
  before_script:
    - module purge
    - module load git
    # Extend the existing environment variables:
    - export PATH="${PYHOME}/bin:${PATH}"
    # Some tests require a large stack:
    - ulimit -s unlimited

.nvhpc-gpu-openacc:
  extends:
    - .gpu-levante
    - .nvhpc-levante
    - .common-levante
  variables:
    # Compiler flags used for ICON model:
    FFLAGS: -g -O2 -Mrecursive -Mallocatable=03 -Mstack_arrays -Minfo=accel,inline -acc=gpu,verystrict -gpu=cc80,cuda12.6
    KERNEL_MODE: accel

.nag-cpu:
  extends:
    - .cpu-levante
    - .nag-levante
    - .common-levante
  variables:
    # Test executables produced in this configuration are too slow to run within
    # the default time limit:
    TIME_LIMIT: "10:00"
    # Compiler flags used for ICON model:
    FFLAGS: -Wc=/sw/spack-levante/gcc-11.2.0-bcn7mb/bin/gcc -f2008 -colour -w=uep -g -gline -O0 -float-store -nan -Wc,-g -Wc,-pipe -Wc,--param,max-vartrack-size=200000000 -Wc,-mno-fma -C=all

.nag-cpu-default:
  extends: .nag-cpu
  variables:
    KERNEL_MODE: default

.nag-cpu-accel:
  extends: .nag-cpu
  variables:
    KERNEL_MODE: accel

nvhpc-gpu-openacc-DP:
  extends:
    - .dp
    - .nvhpc-gpu-openacc

nvhpc-gpu-openacc-SP:
  extends:
    - .sp
    - .nvhpc-gpu-openacc

nag-cpu-default-SP:
  extends:
    - .sp
    - .nag-cpu-default

nag-cpu-accel-DP:
  extends:
    - .dp
    - .nag-cpu-accel

.default-lumi:
  variables:
    TIME_LIMIT: "05:00"
    SCHEDULER_PARAMETERS: >-
      --account=project_465000454
      --nodes=1
      --ntasks=1
      --cpus-per-task=4
      --mem-per-cpu=1G
      --time=${TIME_LIMIT}
      ${EXTRA_SCHEDULER_PARAMETERS}
    EXTRA_SCHEDULER_PARAMETERS:
  id_tokens:
    CI_JOB_JWT:
      aud: https://gitlab.dkrz.de
  tags:
    - lumi

.gpu-lumi:
  extends: .default-lumi
  variables:
    EXTRA_SCHEDULER_PARAMETERS: >-
      --partition=dev-g
      --gpus=1

.cpu-lumi:
  extends: .default-lumi
  variables:
    EXTRA_SCHEDULER_PARAMETERS: >-
      --partition=debug

.cce-lumi:
  variables:
    FC: ftn
    COMPILER_MODULES: PrgEnv-cray cce/16.0.1 craype-x86-milan

#
# Set up Python virtual environment
#
.python-common-lumi:
  variables:
    PYHOME: ${CI_PROJECT_DIR}/python-venv
    FF_USE_FASTZIP: 1

setup-python:
  extends:
    - .cpu-lumi
    - .python-common-lumi
  script:
    - test ! -d "${PYHOME}" || exit 0
    - module load cray-python
    - python -m venv ${PYHOME}
    - ${PYHOME}/bin/python -m pip install --upgrade pip
    - ${PYHOME}/bin/python -m pip install dask[array] netCDF4 numpy xarray
  cache:
    # Update the key to regenerate the virtual environment:
    key: python-venv-version-1
    paths:
      - ${PYHOME}
  artifacts:
    paths:
      - ${PYHOME}
    expire_in: 60 minutes

.common-lumi:
  extends:
    - .python-common-lumi
    - .common
  needs:
    - setup-python
  before_script:
    - module --force purge
    - module load ${COMPILER_MODULES} ${EXTRA_COMPILER_MODULES} cray-hdf5 cray-netcdf
    # Extend the existing environment variables:
    - export PATH="${PYHOME}/bin:${PATH}"

.cce-gpu-openacc:
  extends:
    - .gpu-lumi
    - .cce-lumi
    - .common-lumi
  variables:
    # Compiler flags used for ICON model:
    FFLAGS: -hacc -hadd_paren -Ktrap=divz,ovf,inv -hflex_mp=intolerant -hfp1 -g
    KERNEL_MODE: accel
    # Convenience variables:
    EXTRA_COMPILER_MODULES: craype-accel-amd-gfx90a rocm

cce-gpu-openacc-DP:
  extends:
    - .dp
    - .cce-gpu-openacc

cce-gpu-openacc-SP:
  extends:
    - .sp
    - .cce-gpu-openacc
