# build and run tests for Cray Fortran OpenMP compiler and run on Cori-GPU
#
# The CI script assume that an Anaconda environment under regular user
# account is availalble under the default Python module which contains
# Anaconda as well as having the following environment pre-created.
# environment should be already installed:
# module load python
# conda create --yes -n e3sm python=3.7
# source activate e3sm
# conda install --yes urllib3 netcdf4 xarray dask
#
# Scratch directory name is:
# /global/cscratch1/ecp-gitlab/$username

# workflow:
#   rules:
#     - if: '$CI_COMMIT_SOURCE == "push"'

variables:
  SCHEDULER_PARAMETERS: "-M escori -N 1 -C gpu -t 15 -c 10 -G 1 -A m3312"

# run using the Cori runner
.ci-runner:
  tags:
    - cori

# re-useable build script
.common_build: &common_build
  - echo "Running build"
  - echo "Building RTE and RRTMGP libraries"
  - cd ${RRTMGP_ROOT}/build
  - rm -f Makefile.conf
  - make clean
  - make
  - echo "Building clear sky example"
  - cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
  - make clean
  - make
  - echo "Building all sky example"
  - cd ${RRTMGP_ROOT}/examples/all-sky
  - make clean
  - make
  - echo "Running clear sky test"
  - cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
  - python ./stage_files.py
  - cp ${RRTMGP_ROOT}/rrtmgp/data/*.nc .
  - echo "Listing files in clear sky directory"
  - ls
  - srun -n 1 ./rrtmgp_rfmip_lw 1800 ./multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc ./rrtmgp-data-lw-g256-2018-12-04.nc
  - srun -n 1 ./rrtmgp_rfmip_sw 1800 ./multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc ./rrtmgp-data-sw-g224-2018-12-04.nc
  - python ./compare-to-reference.py --fail=7.e-4
  - echo "Running all sky test"
  - cd ${RRTMGP_ROOT}/examples/all-sky
  - cp ${RRTMGP_ROOT}/rrtmgp/data/*.nc .
  - cp ${RRTMGP_ROOT}/extensions/cloud_optics/*.nc .
  - cp garand-atmos-1.nc rrtmgp-allsky.nc
  - srun -n 1 ./rrtmgp_allsky ./rrtmgp-allsky.nc ./rrtmgp-data-lw-g256-2018-12-04.nc ./rrtmgp-cloud-optics-coeffs-lw.nc 128
  - srun -n 1 ./rrtmgp_allsky ./rrtmgp-allsky.nc ./rrtmgp-data-sw-g224-2018-12-04.nc ./rrtmgp-cloud-optics-coeffs-sw.nc 128
  - python ./compare-to-reference.py

# Common configuration step
before_script:
  - echo "Setting up RTE-RRTMGP environment variables"
  - echo "CI_PROJECT_DIR =" ${CI_PROJECT_DIR}
  - echo "Loading conda environment"
  - module load python
  - source activate e3sm
  - echo "Setting ulimits"
  - ulimit -c unlimited
  - ulimit -s unlimited
  - export RRTMGP_ROOT=$PWD
  - export RRTMGP_DIR=$PWD/build
  - export RRTMGP_BUILD=${RRTMGP_ROOT}/build

# CCE Compiler configuration
.cce_config: &cce_config
  - echo "Loading modules"
  - module load cgpu
  - module swap PrgEnv-{intel,cray}
  - module swap craype-{${CRAY_CPU_TARGET},x86-skylake}
  - module swap cce cce/10.0.3
  - module load cuda
  - export CRAY_ACCEL_TARGET=nvidia70
  - module list
  - echo "Setting environmenta variables for NETCDF"
  - export NCHOME=`spack location -i netcdf-c~mpi%cce@10.0.3`
  - export NFHOME=`spack location -i netcdf-fortran%cce@10.0.3`
  - export LD_LIBRARY_PATH=${NFHOME}/lib:${NCHOME}/lib:${LD_LIBRARY_PATH}
  - echo $LD_LIBRARY_PATH
  - unset CRAY_ACC_DEBUG
  - echo "Set compiler specific variables"
  - export FC=ftn

# PGI Compiler configuration
.pgi_config: &pgi_config
  - echo "Loading modules"
  - module purge
  - module load cgpu
  - module load pgi/19.9
  - module list
  - echo "Setting environmenta variables for NETCDF"
  - export NCHOME=`spack location -i netcdf-c~mpi%pgi@19.9`
  - export NFHOME=`spack location -i netcdf-fortran%pgi@19.9`
  - export LD_LIBRARY_PATH=${NFHOME}/lib:${NCHOME}/lib:${LD_LIBRARY_PATH}
  - echo $LD_LIBRARY_PATH
  - echo "Set compiler specific variables"
  - export FC=pgfortran

stages:
  - build_test

# build using Cray Compiler for sequential code
build-test-cori-gpu-cce:
  extends: .ci-runner

  stage: build_test

  script:
    - *cce_config
    - echo "Cori GPU (CCE - serial)"
    - unset RTE_KERNELS
    - export FCFLAGS="-hnoacc -hnoomp -O0"
    - *common_build

# build using Cray Compiler for OpenMP offload
build-test-cori-gpu-cce-omp:
  extends: .ci-runner

  stage: build_test

  script:
    - *cce_config
    - echo "Cori GPU (CCE - OpenMP offload to GPU)"
    - export RTE_KERNELS=openacc
    - export FCFLAGS="-hnoacc -homp -O0"
    - *common_build

# build using PGI compiler for sequential code
build-test-cori-gpu-pgi:
  extends: .ci-runner

  stage: build_test

  script:
    - *pgi_config
    - echo "Cori GPU (PGI - serial)"
    - unset RTE_KERNELS
    - export FCFLAGS="-O3 -g"
    - *common_build

# build using PGI compiler for OpenACC offload
build-test-cori-gpu-pgi-acc:
  extends: .ci-runner

  stage: build_test

  script:
    - *pgi_config
    - echo "Cori GPU (PGI - OpenACC offload to GPU)"
    - export RTE_KERNELS=openacc
    - export FCFLAGS="-O3 -g -acc -ta=tesla:fastmath,cc70"
    - *common_build
