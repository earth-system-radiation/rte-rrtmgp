jobs:
- job: build_daint
  pool: CSCS
  strategy:
    matrix:
      pgi_19_9_gpu:
        compiler_module: PGI/19.9
        PrgEnv: PrgEnv-pgi
        accel_module: cudatoolkit
        FCFLAGS: "-O3 -ta=tesla:cc60,cuda10.1 -Mallocatable=03 -gopt -Minline,reshape,maxsize:40"
        RTE_KERNELS: openacc
      pgi_default_gpu:
        compiler_module: pgi
        PrgEnv: PrgEnv-pgi
        accel_module: craype-accel-nvidia60
        # Generic accelerator flag
        FCFLAGS: "-O3 -acc                   -Mallocatable=03 -gopt"
        RTE_KERNELS: openacc
      pgi_19_10_cpu:
        compiler_module: PGI/19.10
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
        RUN_CMD:
      pgi_19_9_cpu:
        compiler_module: PGI/19.9
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
        RUN_CMD:
      pgi_default_cpu:
        compiler_module: pgi
        PrgEnv: PrgEnv-pgi
        accel_module:
        # Error checking flags
        FCFLAGS: "-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
#      intel_default_cpu:
#        compiler_module: intel
#        PrgEnv: PrgEnv-intel
#        accel_module:
        # Error checking flags
#        FCFLAGS: "-m64 -g  -traceback -assume realloc_lhs -extend-source 132 -check bounds,uninit,pointers,stack -stand f03"
    maxParallel: 2

  workspace:
    clean: all

  steps:
  - script: |
      set -e

      echo "
      export PATH=$CRAY_BINUTILS_BIN:$PATH
      module load daint-gpu
      module swap PrgEnv-cray $(PrgEnv)
      module load cray-netcdf cray-hdf5
      module swap pgi $(compiler_module)
      module load $(accel_module)
      module load cray-python/3.6.5.7
      export LD_LIBRARY_PATH=$CRAY_LD_LIBRARY_PATH:$LD_LIBRARY_PATH

      echo Environment:
      module list
      " > modules

    displayName: 'Create module environment'
  - script: |
      set -e
      source modules
      # This module will unload some of the build modules, so load the files separately
      module load netcdf-python
      cd examples/rfmip-clear-sky
      python ./stage_files.py
    displayName: 'Stage files'
  - script: |
      set -e
      source modules
      export RRTMGP_ROOT=$PWD
      export RRTMGP_BUILD=$PWD/build
      export FC=ftn
      make -C build/ clean
      make -C build/ -j 8
      make -C tests clean
      make -C tests -j 1
      make -C examples/all-sky clean
      make -C examples/all-sky -j 8
      make -C examples/rfmip-clear-sky clean
      make -C examples/rfmip-clear-sky -j 8
    displayName: 'Make'
  - script: |
      set -e
      source modules
      export RRTMGP_ROOT=$PWD
      cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
      srun -C gpu -A c15 -p cscsci python ./run-rfmip-examples.py --block_size 1800
      cd  ${RRTMGP_ROOT}/examples/all-sky
      srun -C gpu -A c15 -p cscsci python ./run-allsky-example.py
      cd  ${RRTMGP_ROOT}/tests
      cp ${RRTMGP_ROOT}/examples/rfmip-clear-sky/multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc test_atmospheres.nc
      srun -C gpu -A c15 -p cscsci ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc
      srun -C gpu -A c15 -p cscsci ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc
    displayName: 'Run'
  - script: |
      set -e
      source modules
      export RRTMGP_ROOT=$PWD
      # This module will unload some of the build modules, so do the checks separately
      module load netcdf-python
      cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
      python ./compare-to-reference.py --fail=7.e-4
      cd ${RRTMGP_ROOT}/examples/all-sky
      python ./compare-to-reference.py
      cd ${RRTMGP_ROOT}/tests
      python verification.py
    displayName: 'Check results'
