sudo: required
dist: xenial
language: cpp
# Could run both sets of kernels in parallel but setup is the majority of the time
#env:
#  - RTE_KERNELS=""
#  - RTE_KERNELS="openacc"
matrix:
  include:
  - name: "PGI community edition "
    compiler: gcc
    env:
    - FC=pgfortran
    - FCFLAGS="-Mallocatable=03 -Mstandard -Mbounds -Mchkptr -Kieee -Mchkstk"
    - TEST_PGI=yes
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - gfortran-8
          - libnetcdf-dev
  - name: "gcc-9"
    compiler: gcc
    env:
    - FC=gfortran-9
    - FCFLAGS="-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -finit-real=nan -DUSE_CBOOL"
    - TEST_PGI=no
    - NCHOME=/usr/
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-9
          - gfortran-9
          - libnetcdf-dev
  - name: "gcc-8"
    compiler: gcc
    env:
    - FC=gfortran-8
    - FCFLAGS="-ffree-line-length-none -m64 -std=f2008 -march=native -fbounds-check -finit-real=nan -DUSE_CBOOL"
    - TEST_PGI=no
    - NCHOME=/usr/
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
        packages:
          - gcc-8
          - gfortran-8
          - libnetcdf-dev
# cache:
#   timeout: 1000
#   directories:
#     - "$HOME/pgi/"
before_install:
# Install PGI Community edition if not present in cache
- if [[ "${TEST_PGI}" == "yes" ]]; then
  wget -q 'https://raw.githubusercontent.com/nemequ/pgi-travis/master/install-pgi.sh';
  chmod +x install-pgi.sh;
  ./install-pgi.sh --nvidia;
  pgfortran --version;
  echo "switch -pthread is" > .userrc;
  echo "append(LDLIB1=-lpthread);" >> .userrc;
  fi

# Install netcdf-fortran for PGI
# git clone https://github.com/Unidata/netcdf-fortran.git
- git clone https://github.com/Unidata/netcdf-fortran.git --branch v4.4.4
- cd netcdf-fortran
- FC=$FC ./configure --prefix=${HOME}/netcdff
- make
- make install
- cd .. || exit 1

# Install CONDA
- wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
- chmod +x miniconda.sh
- ./miniconda.sh -b
- export PATH=/home/travis/miniconda3/bin:$PATH
- conda update --yes conda

install:
# conda create --yes -n test python=$TRAVIS_PYTHON_VERSION
- conda create --yes -n test python=3.7
- source activate test
- conda install --yes urllib3 netcdf4 xarray dask scipy

before_script:
- export RRTMGP_ROOT=$PWD
- export RRTMGP_BUILD=$PWD/build
- export NFHOME=${HOME}/netcdff
- export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NFHOME/lib
- cd examples/rfmip-clear-sky
- python3 ./stage_files.py
- cd ../..
script:
#
# Default kernels
#
- cd ${RRTMGP_ROOT}
#
# Build library
#
- make -C build clean || exit 1
- make -C build       || exit 1
#
# Build and run RFMIP examples
#
- cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky || exit 1
- make clean
- make || exit 1
- python3 ./run-rfmip-examples.py
- python3 ./compare-to-reference.py --fail=7.e-4
- make clean
#
# Build and run all-sky example
#
- cd ${RRTMGP_ROOT}/examples/all-sky || exit 1
- make clean
- make || exit 1
- python3 ./run-allsky-example.py
- python3 ./compare-to-reference.py
- make clean
#
# Build and regression tests
#
- cd ${RRTMGP_ROOT}/tests|| exit 1
- make clean
- make || exit 1
- cp ${RRTMGP_ROOT}/examples/rfmip-clear-sky/multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc test_atmospheres.nc
- ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc
- ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc
- python3 verification.py
#
# Open-acc kernels
#
- cd ${RRTMGP_ROOT}
#
# Build library
#
- make -C build clean || exit 1
- make -C build       || exit 1
#
# Build and run RFMIP examples
#
- cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky || exit 1
- make clean
- make || exit 1
- python3 ./run-rfmip-examples.py
- python3 ./compare-to-reference.py --fail=7.e-4
- make clean
#
# Build and run all-sky example
#
- cd ${RRTMGP_ROOT}/examples/all-sky || exit 1
- make clean
- make || exit 1
- python3 ./run-allsky-example.py
- python3 ./compare-to-reference.py
- make clean
#
# Build and regression tests
#
- cd ${RRTMGP_ROOT}/tests|| exit 1
- make clean
- make || exit 1
- cp ${RRTMGP_ROOT}/examples/rfmip-clear-sky/multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc test_atmospheres.nc
- ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc
- ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc
- python3 verification.py
notifications:
  email:
    on_success: never
    on_failure: never
