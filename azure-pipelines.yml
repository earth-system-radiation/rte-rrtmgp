jobs:
- job: build_daint
  pool: CSCS
  strategy:
    matrix:
      pgi_default_gpu:
        compiler_base: pgi
        compiler_module: pgi
        accel_module: craype-accel-nvidia60
        # Generic accelerator flag
        FCFLAGS: "-O3 -acc                   -Mallocatable=03 -gopt"
        RTE_KERNELS: openacc
        RUN_CMD: "srun -C gpu -A c15 -p cscsci"
      cce-cpu-icon-production:
        compiler_base: cray
        compiler_module: cce-icon/10.0.2
        accel_module:
        # Production flags for Icon model
        FCFLAGS: "-hadd_paren -r am -Ktrap=divz,ovf,inv -hflex_mp=intolerant -hfp1 -hnoacc -O1,cache0"
      cce-openmp:
        compiler_base: cray
        compiler_module: cce/10.0.2
        accel_module: craype-accel-nvidia60
        # OpenMP flags from Nichols Romero (Argonne)
        FCFLAGS: "-hnoacc -homp -O0"
        RTE_KERNELS: openacc
        RUN_CMD: "srun -C gpu -A c15 -p cscsci"
    maxParallel: 2

  workspace:
    clean: all

  steps:
  - script: |
      set -e

      echo '
      module load daint-gpu
      export PATH=$CRAY_BINUTILS_BIN:$PATH
      module swap PrgEnv-cray PrgEnv-$(compiler_base)
      module swap $(compiler_base) $(compiler_module)
      module load $(accel_module)
      module load cray-netcdf cray-hdf5
      export LD_LIBRARY_PATH=$CRAY_LD_LIBRARY_PATH:$LD_LIBRARY_PATH
      export CUDA_HOME=$CUDATOOLKIT_HOME
      echo Compiler Environment:
      module list
      echo LD_LIBRARY_PATH is:
      echo $LD_LIBRARY_PATH
      ' > compiler_modules

    displayName: 'Create module environment'
  - script: |
      set -e
      module load daint-gpu
      module load netcdf-python
      cd examples/rfmip-clear-sky
      python ./stage_files.py
    displayName: 'Stage files'
  - script: |
      set -e
      source compiler_modules
      export RRTMGP_ROOT=$PWD
      export RRTMGP_BUILD=$PWD/build
      export FC=ftn
      make -C build/ clean

      make -C build/ -j 8
      make -C tests clean
      make -C tests -j 1
      make -C examples/all-sky clean
      make -C examples/all-sky -j 8
      make -C examples/rfmip-clear-sky clean
      make -C examples/rfmip-clear-sky -j 8
    displayName: 'Make'
  - script: |
      set -e
      source compiler_modules
      module load cray-python
      export RRTMGP_ROOT=$PWD
      cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
      ${RUN_CMD} python ./run-rfmip-examples.py --block_size 1800
      cd  ${RRTMGP_ROOT}/examples/all-sky
      ${RUN_CMD} python ./run-allsky-example.py
      cd  ${RRTMGP_ROOT}/tests
      cp ${RRTMGP_ROOT}/examples/rfmip-clear-sky/multiple_input4MIPs_radiation_RFMIP_UColorado-RFMIP-1-2_none.nc test_atmospheres.nc
      ${RUN_CMD} ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-lw-g256-2018-12-04.nc
      ${RUN_CMD} ./clear_sky_regression test_atmospheres.nc ${RRTMGP_ROOT}/rrtmgp/data/rrtmgp-data-sw-g224-2018-12-04.nc
    displayName: 'Run'
  - script: |
      set -e
      module load daint-gpu
      export RRTMGP_ROOT=$PWD
      # This module will unload some of the build modules, so do the checks separately
      module load netcdf-python
      cd ${RRTMGP_ROOT}/examples/rfmip-clear-sky
      python ./compare-to-reference.py --fail=7.e-4
      cd ${RRTMGP_ROOT}/examples/all-sky
      python ./compare-to-reference.py
      cd ${RRTMGP_ROOT}/tests
      python verification.py
    displayName: 'Check results'
